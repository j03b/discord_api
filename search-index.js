var searchIndex = JSON.parse('{\
"discord":{"doc":"","i":[[5,"main","discord","",null,[[],[["result",4],["error",3]]]],[0,"apps","","",null,null],[0,"invite","discord::apps","",null,null],[5,"get_app","discord::apps::invite","",null,[[],["app",3]]],[5,"handle_input","","",null,[[["argmatches",3]]]],[0,"features","","",null,null],[5,"get_app","discord::apps::invite::features","",null,[[],["app",3]]],[5,"handle_input","","",null,[[["argmatches",3]]]],[0,"welcome","discord::apps::invite","",null,null],[5,"get_app","discord::apps::invite::welcome","",null,[[],["app",3]]],[5,"handle_input","","",null,[[["argmatches",3]]]],[17,"VERSION","discord","",null,null],[17,"DESCRIPTION","","",null,null]],"p":[]},\
"discord_api":{"doc":"A library for fetching various structures from the Discord…","i":[[0,"http","discord_api","",null,null],[5,"get_invite","discord_api::http","Fetches an invite from the Discord API.",null,[[["display",8]]]],[0,"models","discord_api","Module containing various structures received from the…",null,null],[3,"Invite","discord_api::models","A struct representing a Discord guild invite, fetched…",null,null],[12,"guild","","The Discord guild the invite points to",0,null],[3,"InviteGuild","","A struct representing a guild that an invite points to",null,null],[12,"name","","The name of the Guild",1,null],[12,"features","","A list of feature flags the guild has",1,null],[12,"welcome_screen","","The configured welcome screen for public guilds",1,null],[3,"WelcomeScreen","","The welcome screen presented to a user when they join the…",null,null],[12,"description","","A description of the server displayed in the welcome screen",2,null],[12,"welcome_channels","","A list of channels which are displayed in the welcome screen",2,null],[3,"WelcomeChannel","","A channel listed in the welcome screen",null,null],[12,"channel_id","","The ID of the channel",3,null],[12,"description","","The description of the channel",3,null],[12,"emoji_id","","The emoji ID of the channel (None if not a custom emote)",3,null],[12,"emoji_name","","The emoji, if unicode it is the unicode character else it…",3,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]]],"p":[[3,"Invite"],[3,"InviteGuild"],[3,"WelcomeScreen"],[3,"WelcomeChannel"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);